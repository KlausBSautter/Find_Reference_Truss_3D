import numpy as np
from matplotlib import pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.patches import FancyArrowPatch
from mpl_toolkits.mplot3d import proj3d
import random


class node:
    def __init__(self,id,coord,aim_coord,force,dofs,fix=[False,False,False]):
        self.id = int(id)
        self.x, self.y, self.z = [float(i) for i in coord] # unknown reference configuration
        self.force = [float(i) for i in force]

        self.x0, self.y0, self.z0 = [float(i) for i in aim_coord]  # known aim configuration  
        self.dofs = dofs  #x,y,z

        self.x1, self.y1, self.z1 = [float(i) for i in aim_coord]  # used to plot extra results

        self.fix = fix

        if self.fix[0] and self.x0 != self.x:
            raise Exception("node "+str(id)+" is fixed in x-direction: coord x must equal aim_coord x")
        if self.fix[1] and self.y0 != self.y:
            raise Exception("node "+str(id)+" is fixed in y-direction: coord y must equal aim_coord y")
        if self.fix[2] and self.z0 != self.z:
            raise Exception("node "+str(id)+" is fixed in z-direction: coord z must equal aim_coord z")

    def reset_node(self):
        self.x, self.y, self.z = self.x0, self.y0, self.z0

    def reset_reverse_node(self):
        self.x0, self.y0, self.z0 = self.x, self.y, self.z

class element:
    def __init__(self, nodeA, nodeB, material_parameters, cross_area):
        self.nodeA = nodeA
        self.nodeB = nodeB
        self.material_parameters = material_parameters
        self.E = float(material_parameters["YoungsModulus"]) # Young's Modulus
        self.A = float(cross_area) # cross sectional area

        self.dofs = np.append(nodeA.dofs,nodeB.dofs)
        self.nr_dofs = len(self.dofs)

        self.g = np.zeros(6)
        self.rho = float(material_parameters.get("density", 0.0))

        self.linear_element = False

        self.gravitational_acceleration = 9.81

    def set_gravity_vector(self,g):
        self.g = np.append(g,g)

    def dx(self,config="x0"):
        dx,dy,dz = self.nodeB.x0-self.nodeA.x0,self.nodeB.y0-self.nodeA.y0,self.nodeB.z0-self.nodeA.z0
        if config == "x":
            dx,dy,dz = self.nodeB.x-self.nodeA.x,self.nodeB.y-self.nodeA.y,self.nodeB.z-self.nodeA.z
        return dx,dy,dz

    def length(self,config="x0"):
        dx,dy,dz = self.dx(config=config)
        return np.sqrt(dx**2 + dy**2 + dz**2)

    def derivative_dead_load(self):

        dx,dy,dz = self.dx(config="x")
        L = self.length(config="x")        

        dLdX = np.array([-dx,-dy,-dz,dx,dy,dz]) / L
        dFdX = np.outer(self.g,dLdX) * 0.5 * self.A * self.rho * self.gravitational_acceleration

        return dFdX

    def residual_dead_load(self):
        return 0.5 * self.rho * self.A * self.length(config="x") * self.g * self.gravitational_acceleration

    def plot(self,axis,which="ref",printed_label=False):


        add_text = " nonlinear"
        color_array = ["gray","black","orange"]

        if self.linear_element:
            add_text = " linear"
            color_array = ["red","blue","green"]

        if which=="aim":
            if printed_label:
                axis.plot([self.nodeA.x1,self.nodeB.x1],[self.nodeA.y1,self.nodeB.y1],[self.nodeA.z1,self.nodeB.z1],'-',color=color_array[0],label="aim"+add_text,zorder=3)
            else:
                axis.plot([self.nodeA.x1,self.nodeB.x1],[self.nodeA.y1,self.nodeB.y1],[self.nodeA.z1,self.nodeB.z1],'-',color=color_array[0],zorder=3)
        elif which=="ref":
            if printed_label:
                axis.plot([self.nodeA.x,self.nodeB.x],[self.nodeA.y,self.nodeB.y],[self.nodeA.z,self.nodeB.z],color=color_array[1],label="reference"+add_text,zorder=5)
            else: 
                axis.plot([self.nodeA.x,self.nodeB.x],[self.nodeA.y,self.nodeB.y],[self.nodeA.z,self.nodeB.z],color=color_array[1],zorder=5)
        elif which=="extra":
            if printed_label:
                axis.plot([self.nodeA.x0,self.nodeB.x0],[self.nodeA.y0,self.nodeB.y0],[self.nodeA.z0,self.nodeB.z0],'-.',color=color_array[2],label="deformed reference"+add_text,zorder=4)
            else:
                axis.plot([self.nodeA.x0,self.nodeB.x0],[self.nodeA.y0,self.nodeB.y0],[self.nodeA.z0,self.nodeB.z0],'-.',color=color_array[2],zorder=4)

    def plot2d(self,which="ref",proj="z",printed_label=False):

        add_text = " nonlinear"
        color_array = ["gray","black","orange"]
        if self.linear_element:
            add_text = " linear"
            color_array = ["red","blue","green"]
            
        if which=="aim":

            if proj=="x":
                a,b = [self.nodeA.y1,self.nodeB.y1],[self.nodeA.z1,self.nodeB.z1]
            elif proj=="y":
                a,b = [self.nodeA.x1,self.nodeB.x1],[self.nodeA.z1,self.nodeB.z1]
            else:
                a,b = [self.nodeA.x1,self.nodeB.x1],[self.nodeA.y1,self.nodeB.y1]

            if printed_label:
                plt.plot(a,b,'-',color=color_array[0],label="aim"+add_text,zorder=3)
            else: 
                plt.plot(a,b,'-',color=color_array[0],zorder=3)

        elif which=="ref":

            if proj=="x":
                a,b = [self.nodeA.y,self.nodeB.y],[self.nodeA.z,self.nodeB.z]
            elif proj=="y":
                a,b = [self.nodeA.x,self.nodeB.x],[self.nodeA.z,self.nodeB.z]
            else:
                a,b = [self.nodeA.x,self.nodeB.x],[self.nodeA.y,self.nodeB.y]

            if printed_label:
                plt.plot(a,b,color=color_array[1],label="reference"+add_text,zorder=5)
            else: 
                plt.plot(a,b,color=color_array[1],zorder=5)


        elif which=="extra":

            if proj=="x":
                a,b = [self.nodeA.y0,self.nodeB.y0],[self.nodeA.z0,self.nodeB.z0]
            elif proj=="y":
                a,b = [self.nodeA.x0,self.nodeB.x0],[self.nodeA.z0,self.nodeB.z0]
            else:
                a,b = [self.nodeA.x0,self.nodeB.x0],[self.nodeA.y0,self.nodeB.y0]

            if printed_label:
                plt.plot(a,b,'-.',color=color_array[2],label="deformed reference"+add_text,zorder=4)
            else:
                plt.plot(a,b,'-.',color=color_array[2],zorder=4)

class element_linear(element):
    def __init__(self, nodeA, nodeB, material_parameters, cross_area):
        super().__init__(nodeA, nodeB, material_parameters, cross_area)
        self.linear_element = True
    
    def stiffness_matrix(self,aim=False):
        EA,x1,x2,y1,y2,z1,z2 = self.E*self.A,self.nodeA.x,self.nodeB.x,self.nodeA.y,self.nodeB.y,self.nodeA.z,self.nodeB.z

        if aim:
            x1,x2,y1,y2,z1,z2 = self.nodeA.x0,self.nodeB.x0,self.nodeA.y0,self.nodeB.y0,self.nodeA.z0,self.nodeB.z0

        return np.array([[1.0*EA*(-x1 + x2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [1.0*EA*(-x1 + x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-y1 + y2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-y1 + y2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [1.0*EA*(-x1 + x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [-1.0*EA*(-x1 + x2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [-1.0*EA*(-x1 + x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-y1 + y2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-y1 + y2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [-1.0*EA*(-x1 + x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)]])

    def residual(self):
        k = self.stiffness_matrix()

        dx1 = self.nodeA.x0 - self.nodeA.x 
        dx2 = self.nodeB.x0 - self.nodeB.x 

        dy1 = self.nodeA.y0 - self.nodeA.y 
        dy2 = self.nodeB.y0 - self.nodeB.y 

        dz1 = self.nodeA.z0 - self.nodeA.z 
        dz2 = self.nodeB.z0 - self.nodeB.z
        
        d = np.array([dx1,dy1,dz1,dx2,dy2,dz2])    


        res = k@d  
        res -= self.residual_dead_load()

        return res

    def K_x1_func(self): 
        EA,x1,x2,y1,y2,z1,z2 = self.E*self.A,self.nodeA.x,self.nodeB.x,self.nodeA.y,self.nodeB.y,self.nodeA.z,self.nodeB.z
        return np.array([[1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(2*x1 - 2*x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(2*x1 - 2*x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-3.0*x1 + 3.0*x2)*(-y1 + y2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-3.0*x1 + 3.0*x2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-3.0*x1 + 3.0*x2)*(-y1 + y2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-3.0*x1 + 3.0*x2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5)], [1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-3.0*x1 + 3.0*x2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-3.0*x1 + 3.0*x2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-3.0*x1 + 3.0*x2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-3.0*x1 + 3.0*x2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5)], [-1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(2*x1 - 2*x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(2*x1 - 2*x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [-1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-3.0*x1 + 3.0*x2)*(-y1 + y2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-3.0*x1 + 3.0*x2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-3.0*x1 + 3.0*x2)*(-y1 + y2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-3.0*x1 + 3.0*x2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5)], [-1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-3.0*x1 + 3.0*x2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-3.0*x1 + 3.0*x2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-3.0*x1 + 3.0*x2)*(-x1 + x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-3.0*x1 + 3.0*x2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-3.0*x1 + 3.0*x2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5)]])

    def K_x2_func(self): 
        EA,x1,x2,y1,y2,z1,z2 = self.E*self.A,self.nodeA.x,self.nodeB.x,self.nodeA.y,self.nodeB.y,self.nodeA.z,self.nodeB.z
        return np.array([[1.0*EA*(-2*x1 + 2*x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5) + 1.0*EA*(-x1 + x2)**2*(3.0*x1 - 3.0*x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(3.0*x1 - 3.0*x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)*(3.0*x1 - 3.0*x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-2*x1 + 2*x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5) - 1.0*EA*(-x1 + x2)**2*(3.0*x1 - 3.0*x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(3.0*x1 - 3.0*x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)*(3.0*x1 - 3.0*x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [1.0*EA*(-x1 + x2)*(3.0*x1 - 3.0*x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(3.0*x1 - 3.0*x2)*(-y1 + y2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(3.0*x1 - 3.0*x2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(3.0*x1 - 3.0*x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(3.0*x1 - 3.0*x2)*(-y1 + y2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(3.0*x1 - 3.0*x2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5)], [1.0*EA*(-x1 + x2)*(3.0*x1 - 3.0*x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(3.0*x1 - 3.0*x2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(3.0*x1 - 3.0*x2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(3.0*x1 - 3.0*x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(3.0*x1 - 3.0*x2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(3.0*x1 - 3.0*x2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5)], [-1.0*EA*(-2*x1 + 2*x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5) - 1.0*EA*(-x1 + x2)**2*(3.0*x1 - 3.0*x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(3.0*x1 - 3.0*x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)*(3.0*x1 - 3.0*x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-2*x1 + 2*x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5) + 1.0*EA*(-x1 + x2)**2*(3.0*x1 - 3.0*x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(3.0*x1 - 3.0*x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)*(3.0*x1 - 3.0*x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [-1.0*EA*(-x1 + x2)*(3.0*x1 - 3.0*x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(3.0*x1 - 3.0*x2)*(-y1 + y2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(3.0*x1 - 3.0*x2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(3.0*x1 - 3.0*x2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(3.0*x1 - 3.0*x2)*(-y1 + y2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(3.0*x1 - 3.0*x2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5)], [-1.0*EA*(-x1 + x2)*(3.0*x1 - 3.0*x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(3.0*x1 - 3.0*x2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(3.0*x1 - 3.0*x2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(3.0*x1 - 3.0*x2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(3.0*x1 - 3.0*x2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(3.0*x1 - 3.0*x2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5)]])

    def K_y1_func(self): 
        EA,x1,x2,y1,y2,z1,z2 = self.E*self.A,self.nodeA.x,self.nodeB.x,self.nodeA.y,self.nodeB.y,self.nodeA.z,self.nodeB.z
        return np.array([[1.0*EA*(-x1 + x2)**2*(-3.0*y1 + 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(-3.0*y1 + 3.0*y2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)*(-3.0*y1 + 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)**2*(-3.0*y1 + 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(-3.0*y1 + 3.0*y2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)*(-3.0*y1 + 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5)], [1.0*EA*(-x1 + x2)*(-3.0*y1 + 3.0*y2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-3.0*y1 + 3.0*y2)*(-y1 + y2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(2*y1 - 2*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-3.0*y1 + 3.0*y2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)*(-3.0*y1 + 3.0*y2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-3.0*y1 + 3.0*y2)*(-y1 + y2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(2*y1 - 2*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-3.0*y1 + 3.0*y2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [1.0*EA*(-x1 + x2)*(-3.0*y1 + 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-3.0*y1 + 3.0*y2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-3.0*y1 + 3.0*y2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(-3.0*y1 + 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-3.0*y1 + 3.0*y2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-3.0*y1 + 3.0*y2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5)], [-1.0*EA*(-x1 + x2)**2*(-3.0*y1 + 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(-3.0*y1 + 3.0*y2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)*(-3.0*y1 + 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)**2*(-3.0*y1 + 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(-3.0*y1 + 3.0*y2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)*(-3.0*y1 + 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5)], [-1.0*EA*(-x1 + x2)*(-3.0*y1 + 3.0*y2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-3.0*y1 + 3.0*y2)*(-y1 + y2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(2*y1 - 2*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-3.0*y1 + 3.0*y2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)*(-3.0*y1 + 3.0*y2)*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-3.0*y1 + 3.0*y2)*(-y1 + y2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(2*y1 - 2*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-3.0*y1 + 3.0*y2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [-1.0*EA*(-x1 + x2)*(-3.0*y1 + 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-3.0*y1 + 3.0*y2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-3.0*y1 + 3.0*y2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(-3.0*y1 + 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-3.0*y1 + 3.0*y2)*(-y1 + y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-3.0*y1 + 3.0*y2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5)]])

    def K_y2_func(self): 
        EA,x1,x2,y1,y2,z1,z2 = self.E*self.A,self.nodeA.x,self.nodeB.x,self.nodeA.y,self.nodeB.y,self.nodeA.z,self.nodeB.z
        return np.array([[1.0*EA*(-x1 + x2)**2*(3.0*y1 - 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(-y1 + y2)*(3.0*y1 - 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)*(3.0*y1 - 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)**2*(3.0*y1 - 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(-y1 + y2)*(3.0*y1 - 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)*(3.0*y1 - 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5)], [1.0*EA*(-x1 + x2)*(-y1 + y2)*(3.0*y1 - 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-2*y1 + 2*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5) + 1.0*EA*(-y1 + y2)**2*(3.0*y1 - 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-y1 + y2)*(3.0*y1 - 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)*(-y1 + y2)*(3.0*y1 - 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-2*y1 + 2*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5) - 1.0*EA*(-y1 + y2)**2*(3.0*y1 - 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-y1 + y2)*(3.0*y1 - 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [1.0*EA*(-x1 + x2)*(3.0*y1 - 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-y1 + y2)*(3.0*y1 - 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(3.0*y1 - 3.0*y2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(3.0*y1 - 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-y1 + y2)*(3.0*y1 - 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(3.0*y1 - 3.0*y2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5)], [-1.0*EA*(-x1 + x2)**2*(3.0*y1 - 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(-y1 + y2)*(3.0*y1 - 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)*(3.0*y1 - 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)**2*(3.0*y1 - 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(-y1 + y2)*(3.0*y1 - 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)*(3.0*y1 - 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5)], [-1.0*EA*(-x1 + x2)*(-y1 + y2)*(3.0*y1 - 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-2*y1 + 2*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5) - 1.0*EA*(-y1 + y2)**2*(3.0*y1 - 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-y1 + y2)*(3.0*y1 - 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)*(-y1 + y2)*(3.0*y1 - 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-2*y1 + 2*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5) + 1.0*EA*(-y1 + y2)**2*(3.0*y1 - 3.0*y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-y1 + y2)*(3.0*y1 - 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [-1.0*EA*(-x1 + x2)*(3.0*y1 - 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-y1 + y2)*(3.0*y1 - 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(3.0*y1 - 3.0*y2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(3.0*y1 - 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-y1 + y2)*(3.0*y1 - 3.0*y2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(3.0*y1 - 3.0*y2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5)]])

    def K_z1_func(self): 
        EA,x1,x2,y1,y2,z1,z2 = self.E*self.A,self.nodeA.x,self.nodeB.x,self.nodeA.y,self.nodeB.y,self.nodeA.z,self.nodeB.z
        return np.array([[1.0*EA*(-x1 + x2)**2*(-3.0*z1 + 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(-y1 + y2)*(-3.0*z1 + 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(-3.0*z1 + 3.0*z2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)**2*(-3.0*z1 + 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(-y1 + y2)*(-3.0*z1 + 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(-3.0*z1 + 3.0*z2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [1.0*EA*(-x1 + x2)*(-y1 + y2)*(-3.0*z1 + 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-y1 + y2)**2*(-3.0*z1 + 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-y1 + y2)*(-3.0*z1 + 3.0*z2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)*(-y1 + y2)*(-3.0*z1 + 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-y1 + y2)**2*(-3.0*z1 + 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-y1 + y2)*(-3.0*z1 + 3.0*z2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [1.0*EA*(-x1 + x2)*(-3.0*z1 + 3.0*z2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-y1 + y2)*(-3.0*z1 + 3.0*z2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-3.0*z1 + 3.0*z2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(2*z1 - 2*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)*(-3.0*z1 + 3.0*z2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-y1 + y2)*(-3.0*z1 + 3.0*z2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-3.0*z1 + 3.0*z2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(2*z1 - 2*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [-1.0*EA*(-x1 + x2)**2*(-3.0*z1 + 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(-y1 + y2)*(-3.0*z1 + 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(-3.0*z1 + 3.0*z2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)**2*(-3.0*z1 + 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(-y1 + y2)*(-3.0*z1 + 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(-3.0*z1 + 3.0*z2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [-1.0*EA*(-x1 + x2)*(-y1 + y2)*(-3.0*z1 + 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-y1 + y2)**2*(-3.0*z1 + 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-y1 + y2)*(-3.0*z1 + 3.0*z2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)*(-y1 + y2)*(-3.0*z1 + 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-y1 + y2)**2*(-3.0*z1 + 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-y1 + y2)*(-3.0*z1 + 3.0*z2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [-1.0*EA*(-x1 + x2)*(-3.0*z1 + 3.0*z2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-y1 + y2)*(-3.0*z1 + 3.0*z2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-3.0*z1 + 3.0*z2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(2*z1 - 2*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)*(-3.0*z1 + 3.0*z2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-y1 + y2)*(-3.0*z1 + 3.0*z2)*(-z1 + z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-3.0*z1 + 3.0*z2)*(-z1 + z2)**2*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(2*z1 - 2*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)]])

    def K_z2_func(self): 
        EA,x1,x2,y1,y2,z1,z2 = self.E*self.A,self.nodeA.x,self.nodeB.x,self.nodeA.y,self.nodeB.y,self.nodeA.z,self.nodeB.z
        return np.array([[1.0*EA*(-x1 + x2)**2*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(-y1 + y2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(-z1 + z2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)**2*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(-y1 + y2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(-z1 + z2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [1.0*EA*(-x1 + x2)*(-y1 + y2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-y1 + y2)**2*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-y1 + y2)*(-z1 + z2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-x1 + x2)*(-y1 + y2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-y1 + y2)**2*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-y1 + y2)*(-z1 + z2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [1.0*EA*(-x1 + x2)*(-z1 + z2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-y1 + y2)*(-z1 + z2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-2*z1 + 2*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5) + 1.0*EA*(-z1 + z2)**2*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(-z1 + z2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-y1 + y2)*(-z1 + z2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-2*z1 + 2*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5) - 1.0*EA*(-z1 + z2)**2*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5)], [-1.0*EA*(-x1 + x2)**2*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(-y1 + y2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-x1 + x2)*(-z1 + z2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)**2*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(-y1 + y2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(-z1 + z2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [-1.0*EA*(-x1 + x2)*(-y1 + y2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-y1 + y2)**2*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), -1.0*EA*(-y1 + y2)*(-z1 + z2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-x1 + x2)*(-y1 + y2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-y1 + y2)**2*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-y1 + y2)*(-z1 + z2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5)], [-1.0*EA*(-x1 + x2)*(-z1 + z2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-y1 + y2)*(-z1 + z2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) - 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), -1.0*EA*(-2*z1 + 2*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5) - 1.0*EA*(-z1 + z2)**2*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5), 1.0*EA*(-x1 + x2)*(-z1 + z2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-x1 + x2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-y1 + y2)*(-z1 + z2)*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5) + 1.0*EA*(-y1 + y2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5), 1.0*EA*(-2*z1 + 2*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-1.5) + 1.0*EA*(-z1 + z2)**2*(3.0*z1 - 3.0*z2)*((-x1 + x2)**2 + (-y1 + y2)**2 + (-z1 + z2)**2)**(-2.5)]])

    def assemble_K_diffs(self,k1,k2,k3,k4,k5,k6):
        k = np.zeros((6,36))
        k[0:6,0:6] = k1
        k[0:6,6:12] = k2
        k[0:6,12:18] = k3
        k[0:6,18:24] = k4
        k[0:6,24:30] = k5
        k[0:6,30:36] = k6
        return k

    def assemble_d(self):

        dx1 = self.nodeA.x0 - self.nodeA.x 
        dx2 = self.nodeB.x0 - self.nodeB.x 

        dy1 = self.nodeA.y0 - self.nodeA.y 
        dy2 = self.nodeB.y0 - self.nodeB.y 

        dz1 = self.nodeA.z0 - self.nodeA.z 
        dz2 = self.nodeB.z0 - self.nodeB.z
        
        t = np.array([dx1,dy1,dz1,dx2,dy2,dz2])

        d = np.zeros((36,6))
        for i in range(6): d[i*6:i*6 + 6,i] = t
        return d

    def derivative_residual(self):
        
        k = self.stiffness_matrix()

        kx1 = self.K_x1_func()
        kx2 = self.K_x2_func()
        ky1 = self.K_y1_func()
        ky2 = self.K_y2_func()
        kz1 = self.K_z1_func()
        kz2 = self.K_z2_func()

        C = self.assemble_K_diffs(kx1,ky1,kz1,kx2,ky2,kz2)

        C = C@self.assemble_d()
        C = C-k
        C = C-self.derivative_dead_load()

        return C

class element_nonlinear(element):
    def __init__(self, nodeA, nodeB, material_parameters, cross_area):
        super().__init__(nodeA, nodeB, material_parameters, cross_area)
        self.claw = material_parameters["claw"]

        if self.claw=="Ogden":
            try:
                ogden_betas = material_parameters["ogden_betas"]
            except KeyError:
                raise KeyError("Ogden constitutive law needs \"ogden_betas\" defined!")

            if ogden_betas[0]==0.0 and ogden_betas[1]==0.0:
                raise ValueError("One of the Ogden betas need to be > 0 !")
            if ogden_betas[0]<0.0 or ogden_betas[1]<0.0:
                raise ValueError("Ogden betas cannot be < 0 !")
            if ogden_betas[0] == ogden_betas[1]:
                raise ValueError("Ogden betas cannot be equal !")


    def material_tangent_modulus(self):
        if self.claw=="StVenant":
            return self.E
        elif self.claw=="NeoHookean":
            return self.E / np.power(2.0 * self.strain_gl() + 1.0, 2.0)
        elif self.claw=="Ogden":
            ogden_betas = self.material_parameters["ogden_betas"]
            return (self.E / (ogden_betas[0]-ogden_betas[1]))*(  (ogden_betas[0]-2.0)*np.power(2.0*self.strain_gl()+1.0,0.5*ogden_betas[0]-2.0) - (ogden_betas[1]-2.0)*np.power(2.0*self.strain_gl()+1.0,0.5*ogden_betas[1]-2.0)  )
        else:
            raise ValueError("Constitutive law: "+ self.claw + " not available!")

    def strain_gl(self):
        l = self.length(config="x0")
        L = self.length(config="x")
        return 0.5 * (np.power(l,2.0) - np.power(L,2.0)) / np.power(L,2.0)

    def stress_pk2(self):
        if self.claw=="StVenant":
            return self.E * self.strain_gl()
        elif self.claw=="NeoHookean":
            return (self.E * self.strain_gl()) / (2.0 * self.strain_gl() + 1.0)
        elif self.claw=="Ogden":
            ogden_betas = self.material_parameters["ogden_betas"]
            return (self.E / (ogden_betas[0]-ogden_betas[1])) * (  np.power(2.0*self.strain_gl()+1.0,0.5*ogden_betas[0]-1.0) - np.power(2.0*self.strain_gl()+1.0,0.5*ogden_betas[1]-1.0)   )
        else:
            raise ValueError("Constitutive law: "+ self.claw+ " not available!")

    def residual(self):
        dx, dy, dz = self.dx(config="x0")
        L = self.length(config="x")
        res = np.array([-dx,-dy,-dz,dx,dy,dz])*self.A*self.stress_pk2()/L
        res -= self.residual_dead_load()
        return res

    def K_numpy(self):

        A, E = self.A, self.E
        X_1,Y_1,Z_1 = self.nodeA.x, self.nodeA.y, self.nodeB.z
        X_2,Y_2,Z_2 = self.nodeB.x, self.nodeB.y, self.nodeB.z
        u_1, v_1, w_1 = self.nodeA.x0-self.nodeA.x, self.nodeA.y0-self.nodeA.y, self.nodeA.z0-self.nodeA.z
        u_2, v_2, w_2 = self.nodeB.x0-self.nodeB.x, self.nodeB.y0-self.nodeB.y, self.nodeB.z0-self.nodeB.z

        if self.claw=="StVenant":
            return np.array([[A*E*(X_1 - X_2 + u_1 - u_2)*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2) + A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(X_1 - X_2 + u_1 - u_2)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(X_1 - X_2 + u_1 - u_2)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)*(X_1 - X_2 + u_1 - u_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2) - A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(X_1 - X_2 + u_1 - u_2)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(X_1 - X_2 + u_1 - u_2)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)], [A*E*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)*(Y_1 - Y_2 + v_1 - v_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(Y_1 - Y_2 + v_1 - v_2)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2) + A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(Y_1 - Y_2 + v_1 - v_2)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)*(Y_1 - Y_2 + v_1 - v_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)*(Y_1 - Y_2 + v_1 - v_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2) - A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(Y_1 - Y_2 + v_1 - v_2)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)], [A*E*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)*(Z_1 - Z_2 + w_1 - w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)*(Z_1 - Z_2 + w_1 - w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(Z_1 - Z_2 + w_1 - w_2)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2) + A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)*(Z_1 - Z_2 + w_1 - w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)*(Z_1 - Z_2 + w_1 - w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)*(Z_1 - Z_2 + w_1 - w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2) - A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)], [A*E*(-X_1 + X_2 - u_1 + u_2)*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2) - A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-X_1 + X_2 - u_1 + u_2)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-X_1 + X_2 - u_1 + u_2)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-X_1 + X_2 - u_1 + u_2)*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2) + A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-X_1 + X_2 - u_1 + u_2)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-X_1 + X_2 - u_1 + u_2)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)], [A*E*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)*(-Y_1 + Y_2 - v_1 + v_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-Y_1 + Y_2 - v_1 + v_2)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2) - A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-Y_1 + Y_2 - v_1 + v_2)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)*(-Y_1 + Y_2 - v_1 + v_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-Y_1 + Y_2 - v_1 + v_2)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2) + A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-Y_1 + Y_2 - v_1 + v_2)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)], [A*E*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)*(-Z_1 + Z_2 - w_1 + w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)*(-Z_1 + Z_2 - w_1 + w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-Z_1 + Z_2 - w_1 + w_2)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2) - A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)*(-Z_1 + Z_2 - w_1 + w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)*(-Z_1 + Z_2 - w_1 + w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2), A*E*(-Z_1 + Z_2 - w_1 + w_2)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2) + A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)]])
        elif self.claw=="NeoHookean":
            return np.array([[A*E*(X_1 - X_2 + u_1 - u_2)*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) + A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(X_1 - X_2 + u_1 - u_2)*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(X_1 - X_2 + u_1 - u_2)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(X_1 - X_2 + u_1 - u_2)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(X_1 - X_2 + u_1 - u_2)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(X_1 - X_2 + u_1 - u_2)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)*(X_1 - X_2 + u_1 - u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)*(X_1 - X_2 + u_1 - u_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(X_1 - X_2 + u_1 - u_2)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(X_1 - X_2 + u_1 - u_2)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(X_1 - X_2 + u_1 - u_2)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(X_1 - X_2 + u_1 - u_2)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2))], [A*E*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)*(Y_1 - Y_2 + v_1 - v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)*(Y_1 - Y_2 + v_1 - v_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(Y_1 - Y_2 + v_1 - v_2)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) + A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(Y_1 - Y_2 + v_1 - v_2)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(Y_1 - Y_2 + v_1 - v_2)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(Y_1 - Y_2 + v_1 - v_2)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)*(Y_1 - Y_2 + v_1 - v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)*(Y_1 - Y_2 + v_1 - v_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)*(Y_1 - Y_2 + v_1 - v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)*(Y_1 - Y_2 + v_1 - v_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(Y_1 - Y_2 + v_1 - v_2)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(Y_1 - Y_2 + v_1 - v_2)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2))], [A*E*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)*(Z_1 - Z_2 + w_1 - w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)*(Z_1 - Z_2 + w_1 - w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)*(Z_1 - Z_2 + w_1 - w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)*(Z_1 - Z_2 + w_1 - w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(Z_1 - Z_2 + w_1 - w_2)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) + A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(Z_1 - Z_2 + w_1 - w_2)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)*(Z_1 - Z_2 + w_1 - w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)*(Z_1 - Z_2 + w_1 - w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)*(Z_1 - Z_2 + w_1 - w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)*(Z_1 - Z_2 + w_1 - w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)*(Z_1 - Z_2 + w_1 - w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)*(Z_1 - Z_2 + w_1 - w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2))], [A*E*(-X_1 + X_2 - u_1 + u_2)*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-X_1 + X_2 - u_1 + u_2)*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-X_1 + X_2 - u_1 + u_2)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-X_1 + X_2 - u_1 + u_2)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-X_1 + X_2 - u_1 + u_2)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-X_1 + X_2 - u_1 + u_2)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-X_1 + X_2 - u_1 + u_2)*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) + A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-X_1 + X_2 - u_1 + u_2)*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-X_1 + X_2 - u_1 + u_2)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-X_1 + X_2 - u_1 + u_2)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-X_1 + X_2 - u_1 + u_2)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-X_1 + X_2 - u_1 + u_2)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2))], [A*E*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)*(-Y_1 + Y_2 - v_1 + v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)*(-Y_1 + Y_2 - v_1 + v_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-Y_1 + Y_2 - v_1 + v_2)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-Y_1 + Y_2 - v_1 + v_2)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-Y_1 + Y_2 - v_1 + v_2)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-Y_1 + Y_2 - v_1 + v_2)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)*(-Y_1 + Y_2 - v_1 + v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)*(-Y_1 + Y_2 - v_1 + v_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-Y_1 + Y_2 - v_1 + v_2)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) + A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-Y_1 + Y_2 - v_1 + v_2)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-Y_1 + Y_2 - v_1 + v_2)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-Y_1 + Y_2 - v_1 + v_2)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2))], [A*E*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)*(-Z_1 + Z_2 - w_1 + w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)*(-Z_1 + Z_2 - w_1 + w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)*(-Z_1 + Z_2 - w_1 + w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)*(-Z_1 + Z_2 - w_1 + w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-Z_1 + Z_2 - w_1 + w_2)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-Z_1 + Z_2 - w_1 + w_2)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)*(-Z_1 + Z_2 - w_1 + w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)*(-Z_1 + Z_2 - w_1 + w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)*(-Z_1 + Z_2 - w_1 + w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)*(-Z_1 + Z_2 - w_1 + w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2)), A*E*(-Z_1 + Z_2 - w_1 + w_2)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) + A*E*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(3/2)) - 0.5*A*E*(-Z_1 + Z_2 - w_1 + w_2)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((0.5 + (-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**2*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)**(5/2))]])
        elif self.claw=="Ogden":
            ogden_betas = self.material_parameters["ogden_betas"]
            return np.array([[A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(X_1 - X_2 + u_1 - u_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) + A*E*((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0) - (1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0))/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(X_1 - X_2 + u_1 - u_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(X_1 - X_2 + u_1 - u_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(X_1 - X_2 + u_1 - u_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - A*E*((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0) - (1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0))/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(X_1 - X_2 + u_1 - u_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(X_1 - X_2 + u_1 - u_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))], [A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(Y_1 - Y_2 + v_1 - v_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(Y_1 - Y_2 + v_1 - v_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) + A*E*((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0) - (1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0))/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(Y_1 - Y_2 + v_1 - v_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(Y_1 - Y_2 + v_1 - v_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(Y_1 - Y_2 + v_1 - v_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - A*E*((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0) - (1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0))/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(Y_1 - Y_2 + v_1 - v_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))], [A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(Z_1 - Z_2 + w_1 - w_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(Z_1 - Z_2 + w_1 - w_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(Z_1 - Z_2 + w_1 - w_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) + A*E*((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0) - (1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0))/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(Z_1 - Z_2 + w_1 - w_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(Z_1 - Z_2 + w_1 - w_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(Z_1 - Z_2 + w_1 - w_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - A*E*((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0) - (1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0))/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))], [A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(-X_1 + X_2 - u_1 + u_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - A*E*((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0) - (1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0))/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(-X_1 + X_2 - u_1 + u_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(-X_1 + X_2 - u_1 + u_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(-X_1 + X_2 - u_1 + u_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) + A*E*((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0) - (1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0))/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(-X_1 + X_2 - u_1 + u_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(-X_1 + X_2 - u_1 + u_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))], [A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(-Y_1 + Y_2 - v_1 + v_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(-Y_1 + Y_2 - v_1 + v_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - A*E*((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0) - (1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0))/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(-Y_1 + Y_2 - v_1 + v_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(-Y_1 + Y_2 - v_1 + v_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(-Y_1 + Y_2 - v_1 + v_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) + A*E*((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0) - (1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0))/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(-Y_1 + Y_2 - v_1 + v_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))], [A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(1.0*X_1 - 1.0*X_2 + 1.0*u_1 - 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(-Z_1 + Z_2 - w_1 + w_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(1.0*Y_1 - 1.0*Y_2 + 1.0*v_1 - 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(-Z_1 + Z_2 - w_1 + w_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(1.0*Z_1 - 1.0*Z_2 + 1.0*w_1 - 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(-Z_1 + Z_2 - w_1 + w_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - A*E*((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0) - (1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0))/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(-1.0*X_1 + 1.0*X_2 - 1.0*u_1 + 1.0*u_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(-Z_1 + Z_2 - w_1 + w_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(-1.0*Y_1 + 1.0*Y_2 - 1.0*v_1 + 1.0*v_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(-Z_1 + Z_2 - w_1 + w_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)), A*E*(2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0)*(0.5*ogden_betas[0] - 1.0)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) - 2.0*(1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0)*(0.5*ogden_betas[1] - 1.0)*(-1.0*Z_1 + 1.0*Z_2 - 1.0*w_1 + 1.0*w_2)/((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))*((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)))*(-Z_1 + Z_2 - w_1 + w_2)/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2)) + A*E*((1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[0] - 1.0) - (1.0 + 2.0*(-0.5*(-X_1 + X_2)**2 - 0.5*(-Y_1 + Y_2)**2 - 0.5*(-Z_1 + Z_2)**2 + 0.5*(-X_1 + X_2 - u_1 + u_2)**2 + 0.5*(-Y_1 + Y_2 - v_1 + v_2)**2 + 0.5*(-Z_1 + Z_2 - w_1 + w_2)**2)/((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))**(0.5*ogden_betas[1] - 1.0))/((ogden_betas[0] - ogden_betas[1])*np.sqrt((-X_1 + X_2)**2 + (-Y_1 + Y_2)**2 + (-Z_1 + Z_2)**2))]]) 
        else:
            raise ValueError("claw: "+ self.claw+ " not available!")

    def K_sympy(self):

        import sympy as sp

        E,A = sp.Symbol("E"),sp.Symbol("A")
        u1,v1,w1 = sp.Symbol("u_1"),sp.Symbol("v_1"),sp.Symbol("w_1")
        u2,v2,w2 = sp.Symbol("u_2"),sp.Symbol("v_2"),sp.Symbol("w_2")
        X1,Y1,Z1 = sp.Symbol("X_1"),sp.Symbol("Y_1"),sp.Symbol("Z_1")
        X2,Y2,Z2 = sp.Symbol("X_2"),sp.Symbol("Y_2"),sp.Symbol("Z_2")

        x1,y1,z1 = X1+u1,Y1+v1,Z1+w1
        x2,y2,z2 = X2+u2,Y2+v2,Z2+w2

        dX,dY,dZ = X2-X1,Y2-Y1,Z2-Z1
        dx,dy,dz = x2-x1,y2-y1,z2-z1

        L = sp.sqrt(dX*dX + dY*dY + dZ*dZ)
        l = sp.sqrt(dx*dx + dy*dy + dz*dz)

        e = 0.5 * (l*l - L*L) / (L*L)

        b1,b2 = sp.Symbol("ogden_betas[0]"), sp.Symbol("ogden_betas[1]")

        if self.claw=="StVenant":
            S = E*e  ### StV, change this later to check for different claws
        elif self.claw=="NeoHookean":
            S = (E * e) / ((2.0 * e) + 1.0)
        elif self.claw=="Ogden":
            S = (E / (b1-b2)) * (  ((2.0*e+1.0)**(0.5*b1-1.0)) - ((2.0*e+1.0)**(0.5*b2-1.0))   )
        else:
            raise ValueError("claw: ", self.claw, " not available!")

        Fint = (sp.Matrix([-dx,-dy,-dz,dx,dy,dz])/(L*L))*A*L*S

        Cs = sp.zeros(6)

        for i in range(6):
            Cs[i,0] = sp.diff(Fint[i],u1)
            Cs[i,1] = sp.diff(Fint[i],v1)
            Cs[i,2] = sp.diff(Fint[i],w1)
            Cs[i,3] = sp.diff(Fint[i],u2)
            Cs[i,4] = sp.diff(Fint[i],v2)
            Cs[i,5] = sp.diff(Fint[i],w2)

        Cs = (((Cs.subs(E,self.E)).subs(A,self.A)).subs(X1,self.nodeA.x)).subs(X2,self.nodeB.x)
        Cs = (((Cs.subs(Y1,self.nodeA.y)).subs(Y2,self.nodeB.y)).subs(Z1,self.nodeA.z)).subs(Z2,self.nodeB.z)

        Cs = Cs.subs(u1,self.nodeA.x0-self.nodeA.x)
        Cs = Cs.subs(v1,self.nodeA.y0-self.nodeA.y)
        Cs = Cs.subs(w1,self.nodeA.z0-self.nodeA.z)

        Cs = Cs.subs(u2,self.nodeB.x0-self.nodeB.x)
        Cs = Cs.subs(v2,self.nodeB.y0-self.nodeB.y)
        Cs = Cs.subs(w2,self.nodeB.z0-self.nodeB.z)

        Cs = np.array(Cs).astype(np.float64)
        return Cs

    def derivative_residual(self):

        dx, dy, dz = self.dx(config="x0")
        dX, dY, dZ = self.dx(config="x")

        l = self.length(config="x0")
        L = self.length(config="x")

        S = self.stress_pk2()

        dx_mat = np.array([-dx,-dy,-dz,dx,dy,dz])
        dX_mat = np.array([-dX,-dY,-dZ,dX,dY,dZ])

        dL_dX = dX_mat / L
        dl_dX = dx_mat / l
        dl_du = dl_dX

        de_dl = l / (L*L)
        de_dL = -(l*l) / (L*L*L)
        de_du = de_dl * dl_du

        dS_de = self.material_tangent_modulus()
        de_dX = de_dL * dL_dX #+ (0 * de_dl * dl_dX) # last part is constant
        dS_dX = dS_de * de_dX


        de_dl_dX = de_dl_dX = (-2*l/(L*L*L)) * dL_dX

        de_du_dX =  np.outer(dl_du,de_dl_dX)

        C = self.A*S*np.outer(de_du,dL_dX)
        C = C + self.A*L*np.outer(de_du,dS_dX)
        C = C + self.A*L*S*de_du_dX

        C = C-self.derivative_dead_load()

        return C

class system:
    def __init__(self, nodes, elements, gravity_direction=np.zeros(3)):

        # check node ids
        id_list = [i.id for i in nodes]
        if len(id_list) != len(set(id_list)):
            raise Exception("Some nodes share same ID!") 

        # get max dof nr
        self.max_dof = 0
        for ele in elements:
             self.max_dof = max(self.max_dof, max(ele.dofs))
        self.nr_dofs = self.max_dof + 1  # we start with 0 

        
        # create fixed dofs error
        self.fixed_dofs = []
        for node in nodes:
            if node.fix[0]: self.fixed_dofs.append(node.dofs[0])
            if node.fix[1]: self.fixed_dofs.append(node.dofs[1])
            if node.fix[2]: self.fixed_dofs.append(node.dofs[2])

        # assemble elements and nodes
        self.elements = elements
        self.nodes = nodes
        
        # initialize residual array
        self.residual_array = []

        # create elemental gravity vector
        check_g_toll = 1e-8
        if np.linalg.norm(gravity_direction) > check_g_toll:
             if abs(np.linalg.norm(gravity_direction) - 1.0) > check_g_toll:
                print(" >> Gravity direction vector g needs to be normalized. Norm(g) = " + str(np.linalg.norm(gravity_direction)))
                gravity_direction = np.asfarray(gravity_direction)
                gravity_direction /= np.linalg.norm(gravity_direction)
                print(" >> Gravity direction vector g has been normalized. g = ", gravity_direction)
        self.set_gravity_vector(gravity_direction)


    def set_gravity_vector(self,g):
        for element_i in self.elements:
            element_i.set_gravity_vector(g)

    def find_node(self,id,nodes):
        for node_i in nodes:
            if node_i.id == id:
                return node_i


    def reset_nodes(self):
        for node in self.nodes: node.reset_node()


    def new_random_position(self,min,max):
        # if initial guess is bad I give a random starting position
        min, max = float(min), float(max)
        self.reset_nodes() # prevent program from beeing stuck in "nan"
        for node in self.nodes:
            if not node.fix[0]: node.x = random.uniform(min,max)
            if not node.fix[1]: node.y = random.uniform(min,max)
            if not node.fix[2]: node.z = random.uniform(min,max)


    def residual(self):
        r = np.zeros(self.nr_dofs)

        for ele in self.elements:
            r_e = ele.residual()
            dofs_e = ele.dofs

            for i, (ri, di) in enumerate(zip(r_e,dofs_e)):
                r[di] += ri

        for node in self.nodes:
            f_n = node.force
            dofs_n = node.dofs

            for di,fi in zip(dofs_n,f_n):
                r[di] -= fi

        return r

    def force_vector(self,invert=False):

        scale = 1.0
        if invert: scale = -1.0

        f = np.zeros(self.nr_dofs)

        for node in self.nodes:
            f_n = node.force 
            dofs_n = node.dofs

            for di,fi in zip(dofs_n,f_n):
                f[di] = fi * scale

        return f

    def global_stiffness_matrix(self,aim=False):
        C = np.zeros((self.nr_dofs,self.nr_dofs))

        for ele in self.elements:
            C_e = ele.stiffness_matrix(aim)

            for i, dofi in enumerate(ele.dofs):
                for j, dofj in enumerate(ele.dofs):
                    
                    C[dofi,dofj] += C_e[i,j]
        return C

    def derivative_residual(self):
        C = np.zeros((self.nr_dofs,self.nr_dofs))

        for ele in self.elements:
            C_e = ele.derivative_residual()

            for i, dofi in enumerate(ele.dofs):
                for j, dofj in enumerate(ele.dofs):
                    
                    C[dofi,dofj] += C_e[i,j]

        return C


    def derivative_residual_original_nonlinear(self):
        # used to assemble nonlinear original stiffness matrix
        C = np.zeros((self.nr_dofs,self.nr_dofs))

        for ele in self.elements:
            C_e = ele.K_numpy()

            for i, dofi in enumerate(ele.dofs):
                for j, dofj in enumerate(ele.dofs):
                    
                    C[dofi,dofj] += C_e[i,j]

        return C


    def solve_original_problem_linear(self,aim=False):

        # aim = False : solve deformation of newly found reference configuration
        # aim = True  : solve deformation of aim configuration with -F

        print(' >> starting to solve original problem')

        F = self.force_vector(aim)
        K = self.global_stiffness_matrix(aim)
        F, K = self.apply_dirichlet_bc(F,K)

        U = np.linalg.solve(K,F)

        for node in self.nodes:
            dofn = node.dofs

            if aim:
                node.x0 = node.x0 + U[dofn[0]]
                node.y0 = node.y0 + U[dofn[1]]
                node.z0 = node.z0 + U[dofn[2]]
            else:
                node.x0 = node.x + U[dofn[0]]
                node.y0 = node.y + U[dofn[1]]
                node.z0 = node.z + U[dofn[2]]
        
        print(' >> original problem solved')

    def solve_original_problem_nonlinear(self,tollerance=1e-10,print_res=True,res_type="all"):

        print(' >> starting to solve original problem')

        for node_i in self.nodes:
            node_i.reset_reverse_node() # reset starting coordinates to found reference configuration for standard FEM analysis

        res = 1e1

        count = 0
        while 1 > 0:

            r = self.residual()
            C = self.derivative_residual_original_nonlinear()

            r, C = self.apply_dirichlet_bc(r, C)

            dx = np.linalg.solve(C,-r)
            self.update_coordinates_solve_original_problem_nonlinear(dx)

            if res_type=="all":
                res = max(np.linalg.norm(dx),np.linalg.norm(r))
                if print_res: print("disp residual: ", "{:e}".format(np.linalg.norm(dx)), "  |  ","force residual: ", "{:e}".format(np.linalg.norm(r)))
            elif res_type=="displacement":
                res = np.linalg.norm(dx)
                if print_res: print("disp residual: ", "{:e}".format(np.linalg.norm(dx)))
            elif res_type=="force":
                res = np.linalg.norm(r)
                if print_res: print("force residual: ", "{:e}".format(np.linalg.norm(r)))
            else:
                raise ValueError("Residual type "+res_type+" not available!")


            
            count += 1

            if abs(res) < tollerance:
                break

        print(' >> original problem solved')


        #test 
        if 1==2:
            for node in self.nodes:
                dofn = node.dofs
                node.x0 = 0.0
                node.y0 = 0.0
                node.z0 = 0.0

    def update_coordinates_solve_original_problem_nonlinear(self,dx):
        for node in self.nodes:
            dofn = node.dofs
            node.x0 += dx[dofn[0]]
            node.y0 += dx[dofn[1]]
            node.z0 += dx[dofn[2]]

    def apply_dirichlet_bc(self, res, der_res):
    
        for dof in self.fixed_dofs:

            res[dof] = 0.0

            for i in range(self.nr_dofs):
                der_res[i,dof] = 0.0
                der_res[dof,i] = 0.0
            
            der_res[dof,dof] = 1.0

        return res, der_res    

    def update_coordinates(self,dx):
        for node in self.nodes:
            dofn = node.dofs
            node.x += dx[dofn[0]]
            node.y += dx[dofn[1]]
            node.z += dx[dofn[2]]


    def solve_inverse_problem(self,tollerance=1e-10,print_res=True,res_type="all"):

        # res_type: "all", "displacement", "force"

        print(' >> starting to solve inverse problem')
        
        res = 1e1

        while abs(res) > tollerance:
            r = self.residual()
            C = self.derivative_residual()
            r, C = self.apply_dirichlet_bc(r, C)

            dx = np.linalg.solve(C,-r)
            self.update_coordinates(dx)


            if res_type=="all":
                res = max(np.linalg.norm(dx),np.linalg.norm(r))
                if print_res: print("disp residual: ", "{:e}".format(np.linalg.norm(dx)), "  |  ","force residual: ", "{:e}".format(np.linalg.norm(r)))
            elif res_type=="displacement":
                res = np.linalg.norm(dx)
                if print_res: print("disp residual: ", "{:e}".format(np.linalg.norm(dx)))
            elif res_type=="force":
                res = np.linalg.norm(r)
                if print_res: print("force residual: ", "{:e}".format(np.linalg.norm(r)))
            else:
                raise ValueError("Residual type "+res_type+" not available!")

            self.residual_array.append(np.linalg.norm(r))  # force residual for convergence grapgs


        print(' >> inverse problem solved')

    def run_initial_analysis(self):
        # idea:
        # run initial analysis with
        # -F in desired configuration to find a suitable start for searching

        K = np.zeros((self.nr_dofs,self.nr_dofs))

        for ele in self.elements:
            K_e = ele.stiffness_matrix(aim=True)

            for i, dofi in enumerate(ele.dofs):
                for j, dofj in enumerate(ele.dofs):
                    
                    K[dofi,dofj] += K_e[i,j]

        F = np.zeros(self.nr_dofs)

        for node in self.nodes:
            f_n = node.force
            dofs_n = node.dofs

            for di,fi in zip(dofs_n,f_n):
                F[di] = fi
        
        F, K = self.apply_dirichlet_bc(F,K)

        u = np.linalg.solve(K,-F) # -F to get a proper position to start the search

        return u

    def system_size(self):
        xmin,xmax,ymin,ymax,zmin,zmax=0.0,0.0,0.0,0.0,0.0,0.0
        for node in self.nodes:
            xmin = min(xmin,node.x)
            xmax = max(xmax,node.x)

            ymin = min(ymin,node.y)
            ymax = min(ymax,node.y)

            zmin = min(zmin,node.z)
            zmax = max(zmax,node.z)

        dx = xmax-xmin
        dy = ymax-ymin
        dz = zmax-zmin
        return dx,dy,dz,xmin,xmax,ymin,ymax,zmin,zmax


    def plot2d(self,print_list,scale_force,scale_arrow=1.0,print_lvl=0.0,proj="z"):

        for print_command in print_list:
            printed_label = True
            for element in self.elements:

                if proj=="x" and (element.nodeA.x0!=print_lvl or element.nodeB.x0!=print_lvl):
                    continue 
                if proj=="y" and (element.nodeA.y0!=print_lvl or element.nodeB.y0!=print_lvl):
                    continue 
                if proj=="z" and (element.nodeA.z0!=print_lvl or element.nodeB.z0!=print_lvl):
                    continue 

                element.plot2d(which=print_command,proj=proj,printed_label=printed_label)
                printed_label = False

        # forces
        # get abs(max) force
        f_max = 0.0
        for node in self.nodes:
            f_max = max(f_max,max([abs(i) for i in node.force]))

        # plot forces
        dx,dy,dz,xmin,xmax,ymin,ymax,zmin,zmax = self.system_size()
        arrow_scale = 0.1

        for node in self.nodes:
            
            if proj=="x" and node.x0!=print_lvl:
                continue 
            if proj=="y" and node.y0!=print_lvl:
                continue 
            if proj=="z" and node.z0!=print_lvl:
                continue 
            
            f = node.force

            if proj=="z":
                if abs(f[0]) > 1e-16:
                    plt.arrow(node.x,node.y,dx*f[0]/f_max*scale_force,0.0,color="red",head_width=0.05*scale_arrow,zorder=100)
                if abs(f[1]) > 1e-16:
                    plt.arrow(node.x,node.y,0.0,dx*f[1]/f_max*scale_force,color="red",head_width=0.05*scale_arrow,zorder=100)

            elif proj=="x":
                if abs(f[1]) > 1e-16:
                    plt.arrow(node.y,node.z,dx*f[1]/f_max*scale_force,0.0,color="red",head_width=0.05*scale_arrow,zorder=100)
                if abs(f[2]) > 1e-16:
                    plt.arrow(node.y,node.z,0.0,dx*f[2]/f_max*scale_force,color="red",head_width=0.05*scale_arrow,zorder=100)

            else:
                if abs(f[0]) > 1e-16:
                    plt.arrow(node.x,node.z,dx*f[0]/f_max*scale_force,0.0,color="red",head_width=0.05*scale_arrow,zorder=100)
                if abs(f[2]) > 1e-16:
                    plt.arrow(node.x,node.z,0.0,dx*f[2]/f_max*scale_force,color="red",head_width=0.05*scale_arrow,zorder=100)


        if proj=="z":
            plt.xlabel('X [m]')
            plt.ylabel('Y [m]')
        elif proj=="y":
            plt.xlabel('X [m]')
            plt.ylabel('Z [m]')
        else:
            plt.xlabel('Y [m]')
            plt.ylabel('Z [m]')

        plt.legend()
        plt.grid(alpha=0.5)
        plt.axis('equal')

    def create_plot_figures_3d(self):
        fig = plt.figure()
        ax = fig.gca(projection='3d')
        return fig, ax


    def plot(self,print_list,external_figure={}):


        # for multiple 3D plots in one graph:
        # fig, ax = system.create_plot_figures_3d()
        # s_1.plot(["aim","ref","extra"], plot_figures)
        # s_2.plot(["aim","ref","extra"], plot_figures)

        # %matplotlib qt  # for external visualization in jupyter notebooks

        if "fig" in external_figure and "ax" in external_figure:
            fig = external_figure["fig"]
            ax = external_figure["ax"]

        else:
            fig = plt.figure()
            ax = fig.gca(projection='3d')
        

        for print_command in print_list:
            printed_label = True
            for element in self.elements:
                element.plot(axis=ax,which=print_command,printed_label=printed_label)
                printed_label = False

        # forces
        
        # get abs(max) force
        f_max = 0.0
        for node in self.nodes:
            f_max = max(f_max,max([abs(i) for i in node.force]))



        # plot forces
        dx,dy,dz,xmin,xmax,ymin,ymax,zmin,zmax = self.system_size()
        arrow_scale = 0.1

        for node in self.nodes:
            f = node.force
            ax.quiver(node.x,node.y,node.z,dx*arrow_scale*f[0]/f_max,dx*arrow_scale*f[1]/f_max,dx*arrow_scale*f[2]/f_max,length=1.0)


        #plt.gca().invert_yaxis()        
        plt.grid(alpha=0.5)
        #plt.axis('equal')

        max_d = max(max(dx,dy),dz)

        #ax.set_xlim(xmin+dx/2-max_d/2,xmin+dx/2+max_d/2)
        #ax.set_ylim(ymin+dy/2-max_d/2,ymin+dy/2+max_d/2)
        #ax.set_zlim(zmin+dz/2-max_d/2,zmin+dz/2+max_d/2)


        ax.set_xlabel('X [m]')
        ax.set_ylabel('Y [m]')
        ax.set_zlabel('Z [m]')
        plt.legend()


    def plot_convergence(self,label_text="NA"):

        plt_color="black"
        plt_style="-"
        if self.elements[0].linear_element:
            plt_color="gray"
            plt_style="--"
        else:
            if self.elements[0].claw=="Ogden":
                plt_style="-."
            elif self.elements[0].claw=="NeoHookean":
                plt_style=":"

        plt.semilogy([i for i in range(len(self.residual_array))],self.residual_array,linestyle=plt_style,color=plt_color,label=label_text)
        plt.xticks([i for i in range(len(self.residual_array))])
        plt.grid()
        if label_text!="NA": plt.legend()
        plt.xlabel(r'$k$')
        plt.ylabel(r'$ \|\| \mathbf{r}^k \|\|_2 $')
        plt.grid(alpha=0.5)
        plt.tight_layout()

    def show_plot(self):
        plt.show()

    def save_plot_pdf(self,filename="plot"):
        plt.savefig(filename+".pdf")


def read_mdpa(filename):

    nodes = []
    elements = []
    mps = {}

    with open(filename, "r") as infile:

        read_nodes = False
        read_elements = False
        read_mp = False
        mp_name_current = ""

        for line in infile.readlines():
            
            if "End" in line: 
                read_nodes = False
                read_elements = False
                read_mp = False
                continue

            if read_nodes:
                line_split = [float(i) for i in line.split(" ") if len(str(i)) > 0]
                nodes.append([int(line_split[0]), line_split[1], line_split[2], line_split[3]])

            if read_elements:

                line_split = line.split(" ")
                line_split_floats = []
                for i in line_split:
                    try: 
                        line_split_floats.append(int(i))
                    except:
                        pass
                elements.append([line_split_floats[0], line_split_floats[2], line_split_floats[3]])
                


            if read_mp:
                mps[mp_name_current] = mps.get(mp_name_current,[])
                try: 
                    mps[mp_name_current].append(int(line))
                except ValueError:
                    pass


            if "Begin Nodes" in line: read_nodes = True
            if "Begin Elements" in line: read_elements = True
            if "Begin SubModelPart DISP" in line: 
                mp_name_current = str(line.split(" ")[5])
                read_mp = True

    return nodes, elements, mps

class system_from_mdpa(system):

    def __init__(self, filename, fix_mps, material_parameters, cross_area, gravity_direction=np.zeros(3), linear_system=True):
        #  forces manually added so far

        mdpa_nodes, mdpa_elements, mdpa_mps = read_mdpa(filename)

        system_nodes = []
        for i,node_i in enumerate(mdpa_nodes):
            temp_node = node(id=node_i[0] ,coord=node_i[1:4],aim_coord=node_i[1:4],force=[0,0,0],dofs=[ i*3 , i*3 + 1,i*3 + 2],fix=[False,False,False])
            system_nodes.append(temp_node)

        system_elements = []
        for element_i in mdpa_elements:

            if linear_system:
                temp_element = element_linear(
                    self.find_node(element_i[1], system_nodes),
                    self.find_node(element_i[2], system_nodes),
                    material_parameters=material_parameters, cross_area=cross_area)
            else:
                temp_element = element_nonlinear(
                    self.find_node(element_i[1], system_nodes),
                    self.find_node(element_i[2], system_nodes),
                    material_parameters=material_parameters, cross_area=cross_area)
            system_elements.append(temp_element)

        # loop through dirichlet mps


        for mp in fix_mps["all"]:
            mp_node_ids = mdpa_mps[mp]
            for node_id in mp_node_ids:
                self.find_node(node_id,system_nodes).fix = [True,True,True]

        for mp in fix_mps["x"]:
            mp_node_ids = mdpa_mps[mp]
            for node_id in mp_node_ids:
                self.find_node(node_id,system_nodes).fix[0] = True

        for mp in fix_mps["y"]:
            mp_node_ids = mdpa_mps[mp]
            for node_id in mp_node_ids:
                self.find_node(node_id,system_nodes).fix[1] = True

        for mp in fix_mps["z"]:
            mp_node_ids = mdpa_mps[mp]
            for node_id in mp_node_ids:
                self.find_node(node_id,system_nodes).fix[2] = True

        
        super().__init__(system_nodes, system_elements, gravity_direction)
